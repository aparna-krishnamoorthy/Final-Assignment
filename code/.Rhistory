m.pres <- c(6.7, 6.4, 6.2, 5.6, 5.6)
massData <- data.frame(I.abs = i.bs,
i.pres = i.pres,
m.pres = m.pres)
i.abs <- c(9.6, 9.4, 8.9, 8.8, 8.5)
i.pres <- c(6.8, 6.6, 6.0, 5.7, 5.3)
m.pres <- c(6.7, 6.4, 6.2, 5.6, 5.6)
massData <- data.frame(I.abs = i.abs,
i.pres = i.pres,
m.pres = m.pres)
massData
hist(massData)
ibrary(nlme)
library(nlme)
massAnova <- lm(massData)
massAnova
anova(massAnova)
mass <- c(9.6, 9.4, 8.9, 8.8, 8.5,6.8, 6.6, 6.0, 5.7, 5.3,6.7, 6.4, 6.2, 5.6, 5.6)
habitat <- c(i.abs,i.abs,i.abs,i.abs,i.abs,i.pres,i.pres,i.pres,i.pres,i.pres,m.pres,m.pres,m.pres,m.pres,m.pres)
massData <- data.frame(mass = mass,
habitat = habitat,)
mass <- c(9.6, 9.4, 8.9, 8.8, 8.5,6.8, 6.6, 6.0, 5.7, 5.3,6.7, 6.4, 6.2, 5.6, 5.6)
habitat <- c(i.abs,i.abs,i.abs,i.abs,i.abs,i.pres,i.pres,i.pres,i.pres,i.pres,m.pres,m.pres,m.pres,m.pres,m.pres)
length(mass) == Length(habitat)
length(mass) == length(habitat)
mass <- c(9.6, 9.4, 8.9, 8.8, 8.5,6.8, 6.6, 6.0, 5.7, 5.3,6.7, 6.4, 6.2, 5.6, 5.6)
habitat <- c(i.abs,i.abs,i.abs,i.abs,i.abs,i.pres,i.pres,i.pres,i.pres,i.pres,m.pres,m.pres,m.pres,m.pres,m.pres)
mass <- c(9.6, 9.4, 8.9, 8.8, 8.5,6.8, 6.6, 6.0, 5.7, 5.3, 6.7, 6.4, 6.2, 5.7, 5.6)
habitat <- c("i.abs","i.abs", "i.abs", "i.abs", "i.abs","i.pres","i.pres", "i.pres", "i.pres", "i.pres", "m.pres" ,"m.pres", "m.pres", "m.pres", "m.pres")
length(mass) == length(habitat)
mass <- c(9.6, 9.4, 8.9, 8.8, 8.5,6.8, 6.6, 6.0, 5.7, 5.3, 6.7, 6.4, 6.2, 5.7, 5.6)
habitat <- c("i.abs","i.abs", "i.abs", "i.abs", "i.abs","i.pres","i.pres", "i.pres", "i.pres", "i.pres", "m.pres" ,"m.pres", "m.pres", "m.pres", "m.pres")
length(mass) == length(habitat)
massData <- data.frame(mass = mass,
habitat = habitat,)
mass <- c(9.6, 9.4, 8.9, 8.8, 8.5,6.8, 6.6, 6.0, 5.7, 5.3, 6.7, 6.4, 6.2, 5.7, 5.6)
habitat <- c("i.abs","i.abs", "i.abs", "i.abs", "i.abs","i.pres","i.pres", "i.pres", "i.pres", "i.pres", "m.pres" ,"m.pres", "m.pres", "m.pres", "m.pres")
length(mass) == length(habitat)
massData <- data.frame(mass = mass,
habitat = habitat)
library(nlme)
massAnova <- lm(mass ~ habitat, data=massData)
anova(massAnova)
results <- vector()
for(i in 1:10000){
AgeSample <- sample(flu$age, size = n, replace = FALSE)
L <- mean(AgeSample) - (1.383*sd(AgeSample)/(sqrt(n)))
U <- mean(AgeSample) + (1.383*sd(AgeSample)/(sqrt(n)))
if(mean(flu$age) < U & mean(flu$age) > L) {
results[i] <- 1 #if true mean is in CI count it
}
else {results[i] <- 0} #if not dont count
}
#fraction of how many were in CI
sum(results)/10000
n <- 10
results <- vector()
for(i in 1:10000){
AgeSample <- sample(flu$age, size = n, replace = FALSE)
L <- mean(AgeSample) - (2.26*sd(AgeSample)/(sqrt(n)))
U <- mean(AgeSample) + (2.26*sd(AgeSample)/(sqrt(n)))
if(mean(flu$age) < U & mean(flu$age) > L) {
results[i] <- 1 #if true mean is in CI count it
}
else {results[i] <- 0} #if not dont count
}
#fraction of how many were in CI
sum(results)/10000
#if the confidence interval was 80%?
results <- vector()
for(i in 1:10000){
AgeSample <- sample(flu$age, size = n, replace = FALSE)
L <- mean(AgeSample) - (1.38*sd(AgeSample)/(sqrt(n)))
U <- mean(AgeSample) + (1.38*sd(AgeSample)/(sqrt(n)))
if(mean(flu$age) < U & mean(flu$age) > L) {
results[i] <- 1 #if true mean is in CI count it
}
else {results[i] <- 0} #if not dont count
}
#fraction of how many were in CI
sum(results)/10000
data <- c(0, 17, 21, 31, 23, 17, 0 , 30, 34, 21, 21, 30 ,0 ,28, 39, 31, 34, 28, 0, 43, 23, 21, 39, 43, 0)
upgma <- matrix(data,
nrow = 5,
ncol = 5
dimnames = list(c("a","b","c","d","e"),
data <- c(0, 17, 21, 31, 23, 17, 0 , 30, 34, 21, 21, 30 ,0 ,28, 39, 31, 34, 28, 0, 43, 23, 21, 39, 43, 0)
upgma <- matrix(data,
nrow = 5,
ncol = 5,
dimnames = list(c("a","b","c","d","e"),
c("a","b","c","d","e"))
upgma
upgma <- matrix(data = data,
data <- c(0, 17, 21, 31, 23, 17, 0 , 30, 34, 21, 21, 30 ,0 ,28, 39, 31, 34, 28, 0, 43, 23, 21, 39, 43, 0)
upgma <- matrix(data = data,
data <- c(0, 17, 21, 31, 23, 17, 0 , 30, 34, 21, 21, 30 ,0 ,28, 39, 31, 34, 28, 0, 43, 23, 21, 39, 43, 0)
upgma <- matrix(data = data,
nrow = 5,
ncol = 5,
dimnames = list(c("a","b","c","d","e"),
c("a","b","c","d","e")))
upgma
---
title: "Matrix Assignment"
output: html_notebook
---
install.packages("ape")
install.packages("ape")
install.packages("phangorn")
library(ape)
library(phangorn)
strl1 <- "((H,C),G);"
tree1 <- read.tree(text=str1)
str1 <- "((H,C),G);"
tree1 <- read.tree(text=str1)
str1 <- "((H,C),G);"
tree1 <- read.tree(text=str1)
tree1
plot(tree1)
factorial(3)
factorial(4)
tree_count)_
tree_count()
tree_count <- function(n=3){
numerator <-factorial(2*n-3)
denominator <-(2^n)*factorial(n-2)
trees <- numerator/denominator
print(trees)
}
tree_count()
tree_count <- function(n=3){
numerator <-factorial(2*n-3)
denominator <-(2^(n-2))*factorial(n-2)
trees <- numerator/denominator
print(trees)
}
tree_count()
tree_count <- function(n=3){
numerator <-factorial(2*n-3)
denominator <-(2^(n-2))*factorial(n-2)
trees <- numerator/denominator
print(trees)
}
tree_count()
treecount(n=4)
tree_count <- function(n=3){
numerator <-factorial(2*n-3)
denominator <-(2^(n-2))*factorial(n-2)
trees <- numerator/denominator
print(trees)
}
tree_count()
tree_count(n=4)
tree_count(5)
tree_count <- function(n=3){
numerator <-factorial(2*n-3)
denominator <-(2^(n-2))*factorial(n-2)
trees <- numerator/denominator
print(trees)
}
tree_count()
tree_count(4)
tree_count(5)
tree_count(4)
# initial data
human   <- c("a","t","c","g","a","t","c","g")
chimp   <- c("a","t","c","a","a","t","c","a")
gorilla <- c("a","a","a","a","a","a","a","a")
rbind(human,chimp)
data <- c(0, 17, 21, 31, 23, 17, 0 , 30, 34, 21, 21, 30 ,0 ,28, 39, 31, 34, 28, 0, 43, 23, 21, 39, 43, 0)
upgma <- matrix(data ,
nrow = 5,
ncol = 5,
dimnames = list(c("a","b","c","d","e"),
c("a","b","c","d","e")))
upgma
data <- c(0, 17, 21, 31, 23, 17, 0 , 30, 34, 21, 21, 30 ,0 ,28, 39, 31, 34, 28, 0, 43, 23, 21, 39, 43, 0)
upgma <- matrix(data ,
nrow = 5,
ncol = 5,
dimnames = list(c("a","b","c","d","e"),
c("a","b","c","d","e")))
upgma
data <- c(0, 17, 21, 31, 23,
17, 0 , 30, 34, 21,
21, 30 ,0 ,28, 39,
31, 34, 28, 0, 43,
23, 21, 39, 43, 0)
upgma <- matrix(data,
nrow = 5,
ncol = 5,
dimnames = list(c("a","b","c","d","e"),
c("a","b","c","d","e")))
distance <- as.dist(upgma)
seq.upgma <- upgma(distance)
plot(seq.upgma, main = "title")
data <- c(0, 17, 21, 31, 23,
17, 0 , 30, 34, 21,
21, 30 ,0 ,28, 39,
31, 34, 28, 0, 43,
23, 21, 39, 43, 0)
upgma <- matrix(data,
nrow = 5,
ncol = 5,
dimnames = list(c("a","b","c","d","e"),
c("a","b","c","d","e")))
distance <- as.dist(upgma)
seq.upgma <- upgma(distance)
plot(seq.upgma, main = "title")
data <- c(0, 17, 21, 31, 23,
17, 0 , 30, 34, 21,
21, 30 ,0 ,28, 39,
31, 34, 28, 0, 43,
23, 21, 39, 43, 0)
upgma <- matrix(data,
nrow = 5,
ncol = 5,
dimnames = list(c("a","b","c","d","e"),
c("a","b","c","d","e")))
distance <- as.dist(upgma)
seq.upgma <- upgma(distance)
plot(seq.upgma, main = "title")
data <- c(0, 17, 21, 31, 23,
17, 0 , 30, 34, 21,
21, 30 ,0 ,28, 39,
31, 34, 28, 0, 43,
23, 21, 39, 43, 0)
upgma <- matrix(data,
nrow = 5,
ncol = 5,
dimnames = list(c("a","b","c","d","e"),
c("a","b","c","d","e")))
upgma
install.packages("ape")
i
library(ape)
library(phangorn)
distance <- as.dist(upgma)
seq.upgma <- upgma(distance)
plot(seq.upgma, main = "title")
plot(seq.upgma, main = "upgma")
data <- c(0, 17, 21, 31, 23,
17, 0 , 30, 34, 21,
21, 30 ,0 ,28, 39,
31, 34, 28, 0, 43,
23, 21, 39, 43, 0)
upgma <- matrix(data,
nrow = 5,
ncol = 5,
dimnames = list(c("a","b","c","d","e"),
c("a","b","c","d","e")))
library(ape)
library(phangorn)
distance <- as.dist(upgma)
seq.upgma <- upgma(distance)
plot(seq.upgma, main = "upgma")
#this is different because there isnt a defined root.
#Though the topoglies are the same the trees are unique
data <- c(0, 17, 21, 31, 23,
17, 0 , 30, 34, 21,
21, 30 ,0 ,28, 39,
31, 34, 28, 0, 43,
23, 21, 39, 43, 0)
upgma <- matrix(data,
nrow = 5,
ncol = 5,
dimnames = list(c("a","b","c","d","e"),
c("a","b","c","d","e")))
library(ape)
library(phangorn)
distance <- as.dist(upgma)
seq.upgma <- upgma(distance)
plot(seq.upgma, main = "upgma")
#this is different because there isnt a defined root.
#Though the topoglies are the same the trees are unique
library(ape)
library(phangorn)
library(rentrez)
library(msa)
library(phangorn)
library(phytools)
library(ape)
library(phangorn)
library(msa)
install.packages("msa")
install.packages("msa")
pdf("../results/birdTableBarPlot.pdf")
ggplot(birdTable, ylab = "Number of Deaths", ylab = "Angle of Window", cex.names = .5, las = 2,
main = "Frequency of Deaths at Each Window Angle",
#colors the graph so there is a gradient
col = c("#38CDFF" ,"#8DE2FF", "#E2F7FF"))
dev.off()
setwd("~/Desktop/Final_Assignment/code")
#code for conducting hypothesis test on data.
#Purpose: to find a relationship between the angle of windows
#and the number of bird death
#remember to set your working directory to the "code" file
#(Session --> Set working directory --> source file directory )
#read in files from raw data folder
birdData <- read.csv("../data/chap08q14BirdWindowCrash.csv")
#places data into a table
birdTable <- sort(table(birdData$angleDuringBirdCrash), decreasing = TRUE)
#organizes table by frequency
data.frame(Frequency = birdTable)
#exporting pdf to the results folder
pdf("../results/birdTableBarPlot.pdf")
ggplot(birdTable, ylab = "Number of Deaths", ylab = "Angle of Window", cex.names = .5, las = 2,
main = "Frequency of Deaths at Each Window Angle",
#colors the graph so there is a gradient
col = c("#38CDFF" ,"#8DE2FF", "#E2F7FF"))
dev.off()
#chi-squared test
#save chi-squared test stats
birdStat <- chisq.test(birdTable, y = NULL)
#outputs the stats into a txt file and saves in results folder
summaryStat <- capture.output(birdStat)
cat("results", summaryStat, file= "../results/summary.txt",
sep = "\n", append = FALSE)
#code for conducting hypothesis test on data.
#Purpose: to find a relationship between the angle of windows
#and the number of bird death
#remember to set your working directory to the "code" file
#(Session --> Set working directory --> source file directory )
#read in files from raw data folder
birdData <- read.csv("../data/chap08q14BirdWindowCrash.csv")
#places data into a table
birdTable <- sort(table(birdData$angleDuringBirdCrash), decreasing = TRUE)
#organizes table by frequency
data.frame(Frequency = birdTable)
library(ggplot2)
#exporting pdf to the results folder
pdf("../results/birdTableBarPlot.pdf")
ggplot2(birdTable, ylab = "Number of Deaths", ylab = "Angle of Window", cex.names = .5, las = 2,
main = "Frequency of Deaths at Each Window Angle",
#colors the graph so there is a gradient
col = c("#38CDFF" ,"#8DE2FF", "#E2F7FF"))
dev.off()
#chi-squared test
#save chi-squared test stats
birdStat <- chisq.test(birdTable, y = NULL)
#outputs the stats into a txt file and saves in results folder
summaryStat <- capture.output(birdStat)
cat("results", summaryStat, file= "../results/summary.txt",
sep = "\n", append = FALSE)
library("ggplot2")
#exporting pdf to the results folder
pdf("../results/birdTableBarPlot.pdf")
ggplot2(birdTable, ylab = "Number of Deaths", ylab = "Angle of Window", cex.names = .5, las = 2,
main = "Frequency of Deaths at Each Window Angle",
#colors the graph so there is a gradient
col = c("#38CDFF" ,"#8DE2FF", "#E2F7FF"))
dev.off()
pdf("../results/birdTableBarPlot.pdf")
ggplot(birdTable, ylab = "Number of Deaths", ylab = "Angle of Window", cex.names = .5, las = 2,
main = "Frequency of Deaths at Each Window Angle",
#colors the graph so there is a gradient
col = c("#38CDFF" ,"#8DE2FF", "#E2F7FF"))
dev.off()
pdf("../results/birdTableBarPlot.pdf")
ggplot(birdTable, ylab = "Number of Deaths", ylab = "Angle of Window", cex.names = .5, las = 2,
main = "Frequency of Deaths at Each Window Angle",
#colors the graph so there is a gradient
col = c("#38CDFF" ,"#8DE2FF", "#E2F7FF"))
dev.off()
pdf("../results/birdTableBarPlot.pdf")
ggplot(birdTable, ylab = "Number of Deaths", ylab = "Angle of Window", cex.names = .5, las = 2,
main = "Frequency of Deaths at Each Window Angle",
#colors the graph so there is a gradient
col = c("#38CDFF" ,"#8DE2FF", "#E2F7FF"))
dev.off()
pdf("../results/birdTableBarPlot.pdf")
ggplot(birdTable, ylab = "Number of Deaths", ylab = "Angle of Window", cex.names = .5, las = 2,
main = "Frequency of Deaths at Each Window Angle",
#colors the graph so there is a gradient
col = c("#38CDFF" ,"#8DE2FF", "#E2F7FF"))
dev.off()
ibrary("ggplot2")
#exporting pdf to the results folder
pdf("../results/birdTableBarPlot.pdf")
ggplot(birdTable, ylab = "Number of Deaths", ylab = "Angle of Window", cex.names = .5, las = 2,
main = "Frequency of Deaths at Each Window Angle",
#colors the graph so there is a gradient
col = c("#38CDFF" ,"#8DE2FF", "#E2F7FF"))
dev.off()
ibrary("ggplot2")
#exporting pdf to the results folder
pdf("../results/birdTableBarPlot.pdf")
ggplot(birdTable, ylab = "Number of Deaths", ylab = "Angle of Window", cex.names = .5, las = 2,
main = "Frequency of Deaths at Each Window Angle",
#colors the graph so there is a gradient
col = c("#38CDFF" ,"#8DE2FF", "#E2F7FF"))
dev.off()
ibrary("ggplot2")
#exporting pdf to the results folder
pdf("../results/birdTableBarPlot.pdf")
ggplot(birdTable, ylab = "Number of Deaths", ylab = "Angle of Window", cex.names = .5, las = 2,
main = "Frequency of Deaths at Each Window Angle",
#colors the graph so there is a gradient
col = c("#38CDFF" ,"#8DE2FF", "#E2F7FF"))
dev.off()
#exporting pdf to the results folder
pdf("../results/birdTableBarPlot.pdf")
barplot(birdTable, ylab = "Number of Deaths", ylab = "Angle of Window", cex.names = .5, las = 2,
main = "Frequency of Deaths at Each Window Angle",
#colors the graph so there is a gradient
col = c("#38CDFF" ,"#8DE2FF", "#E2F7FF"))
dev.off()
#code for conducting hypothesis test on data.
#Purpose: to find a relationship between the angle of windows
#and the number of bird death
#remember to set your working directory to the "code" file
#(Session --> Set working directory --> source file directory )
#read in files from raw data folder
birdData <- read.csv("../data/chap08q14BirdWindowCrash.csv")
#places data into a table
birdTable <- sort(table(birdData$angleDuringBirdCrash), decreasing = TRUE)
#organizes table by frequency
data.frame(Frequency = birdTable)
#exporting pdf to the results folder
pdf("../results/birdTableBarPlot.pdf")
barplot(birdTable, ylab = "Number of Deaths", ylab = "Angle of Window", cex.names = .5, las = 2,
main = "Frequency of Deaths at Each Window Angle",
#colors the graph so there is a gradient
col = c("#38CDFF" ,"#8DE2FF", "#E2F7FF"))
dev.off()
#chi-squared test
#save chi-squared test stats
birdStat <- chisq.test(birdTable, y = NULL)
#outputs the stats into a txt file and saves in results folder
summaryStat <- capture.output(birdStat)
cat("results", summaryStat, file= "../results/summary.txt",
sep = "\n", append = FALSE)
library("ggplot2")
#exporting pdf to the results folder
pdf("../results/birdTableBarPlot.pdf")
ggplot(birdTable, ylab = "Number of Deaths", xlab = "Angle of Window", cex.names = .5, las = 2,
main = "Frequency of Deaths at Each Window Angle",
#colors the graph so there is a gradient
col = c("#38CDFF" ,"#8DE2FF", "#E2F7FF"))
dev.off()
is(birdTable)
pdf("../results/birdTableBarPlot.pdf")
ggplot(birdData, ylab = "Number of Deaths", xlab = "Angle of Window", cex.names = .5, las = 2,
main = "Frequency of Deaths at Each Window Angle",
#colors the graph so there is a gradient
col = c("#38CDFF" ,"#8DE2FF", "#E2F7FF"))
dev.off()
#code for conducting hypothesis test on data.
#Purpose: to find a relationship between the angle of windows
#and the number of bird death
#remember to set your working directory to the "code" file
#(Session --> Set working directory --> source file directory )
#read in files from raw data folder
birdData <- read.csv("../data/chap08q14BirdWindowCrash.csv")
#places data into a table
birdTable <- sort(table(birdData$angleDuringBirdCrash), decreasing = TRUE)
#organizes table by frequency
data.frame(Frequency = birdTable)
#remember to commit the x axis label
#exporting pdf to the results folder
pdf("../results/birdTableBarPlot.pdf")
barplot(birdTable, ylab = "Number of Deaths", xlab = "Angle of Window", cex.names = .5, las = 2,
main = "Frequency of Deaths at Each Window Angle",
#colors the graph so there is a gradient
col = c("#38CDFF" ,"#8DE2FF", "#E2F7FF"))
dev.off()
#chi-squared test
#save chi-squared test stats
birdStat <- chisq.test(birdTable, y = NULL)
#outputs the stats into a txt file and saves in results folder
summaryStat <- capture.output(birdStat)
cat("results", summaryStat, file= "../results/summary.txt",
sep = "\n", append = FALSE)
pdf("../results/birdTableBarPlot.pdf")
barplot(birdTable, ylab = "Number of Deaths", xlab = "Angle of Window", cex.names = .5, las = 2,
main = "Frequency of Deaths at Each Window Angle",
#colors the graph so there is a gradient
col = c("#38CDFF" ,"#8DE2FF", "#E2F7FF") + theme(axis.text.x = element_text(angle = 90)))
dev.off()
pdf("../results/birdTableBarPlot.pdf")
barplot(birdTable, ylab = "Number of Deaths", xlab = "Angle of Window", cex.names = .5, las = 2,
main = "Frequency of Deaths at Each Window Angle",
#colors the graph so there is a gradient
col = c("#38CDFF" ,"#8DE2FF", "#E2F7FF") + theme(axis.text.x = element_text(angle = 180)))
dev.off()
#code for conducting hypothesis test on data.
#Purpose: to find a relationship between the angle of windows
#and the number of bird death
#remember to set your working directory to the "code" file
#(Session --> Set working directory --> source file directory )
#read in files from raw data folder
birdData <- read.csv("../data/chap08q14BirdWindowCrash.csv")
#places data into a table
birdTable <- sort(table(birdData$angleDuringBirdCrash), decreasing = TRUE)
#organizes table by frequency
data.frame(Frequency = birdTable)
#remember to commit the x axis label
#exporting pdf to the results folder
pdf("../results/birdTableBarPlot.pdf")
barplot(birdTable, ylab = "Number of Deaths", xlab = "Angle of Window", cex.names = .5, las = 2,
main = "Frequency of Deaths at Each Window Angle",
#colors the graph so there is a gradient
col = c("#38CDFF" ,"#8DE2FF", "#E2F7FF"))
dev.off()
#chi-squared test
#save chi-squared test stats
birdStat <- chisq.test(birdTable, y = NULL)
#outputs the stats into a txt file and saves in results folder
summaryStat <- capture.output(birdStat)
cat("results", summaryStat, file= "../results/summary.txt",
sep = "\n", append = FALSE)
