Dab_d <- 32.5
De_d  <- 43
Dabe_d <- (Dab_d*2 + De_d*1)/(2+1)
abe <- c(NA,     NA,  NA)
c	   <- c(Dabe_c, NA,  NA)
d	   <- c(Dabe_d, 28,	 NA)
dmat3 <- rbind(abe,c,d)
colnames(dmat3) <- c("abe","c","d")
plot_dist_as_nmds(dmat3)
dist.min.i <- min(dmat3, na.rm = T)
par(mfrow = c(1,1))
dmat3.out <- plot_dist_as_nmds(dmat3)
#get x y coord of ab and e
c. <-dmat3.out$points["c",]
d.<-dmat3.out$points["d",]
draw.ellipse(x = mean(c(c.[1],d.[1])),
y = mean(c(c.[2],d.[2])),
a =14,
b = 4,
angle = 105)
abe.<-dmat3.out$points["abe",]
segments(x0 = c.[1],x1 = abe.[1],
y0 = c.[2],y1 = abe.[2])
segments(x0 = d.[1],x1 = abe.[1],
y0 = d.[2],y1 = abe.[2])
Dc_abc <- 30
Dd_abe <- 36
# abe is composted of 3
Ddc_abe <- (Dc_abe*3 + Dd_abe*3)/(3+3)
Dc_abe <- 30
Dd_abe <- 36
# abe is composted of 3
Ddc_abe <- (Dc_abe*3 + Dd_abe*3)/(3+3)
# factor out 3
Ddc_abe <- 3*(Dc_abe*1 + Dd_abe*1)/6
# simplify
Ddc_abe <- 1*(Dc_abe*1 + Dd_abe*1)/2
Ddc_abe <- (Dc_abe*1 + Dd_abe)/2
abe <- c(NA,     NA)
cd	 <- c(Ddc_abe, NA)
dmat4 <- rbind(abe,cd)
colnames(dmat4) <- c("abe","cd")
abe <- c(NA,     NA)
cd	 <- c(Ddc_abe, NA)
dmat4 <- rbind(abe,cd)
colnames(dmat4) <- c("abe","cd")
dmat4
abe <- c(NA,    Ddc_abe)
cd	 <- c(Ddc_abe, NA)
dmat4 <- rbind(abe,cd)
colnames(dmat4) <- c("abe","cd")
dmat4
Dab_c <- 25.5
De_c  <- 39
Dabe_c <- (Dab_c + De_c)/(2)
Dab_d <- 32.5
De_d  <- 43
Dabe_d <- (Dab_d + De_d)/(2)
abe <- c(NA,     NA,  NA)
c	   <- c(Dabe_c, NA,  NA)
d	   <- c(Dabe_d, 28,	 NA)
dmat3 <- rbind(abe,c,d)
colnames(dmat3) <- c("abe","c","d")
plot_dist_as_nmds(dmat3)
Dc_abe <- 32.25
Dd_abe <- 37.75
# abe is composted of 3
Ddc_abe <- (Dc_abe + Dd_abe)/(2)
abe <- c(NA,    NA)
cd	 <- c(Ddc_abe, NA)
dmat4 <- rbind(abe,cd)
colnames(dmat4) <- c("abe","cd")
dmat4
abe <- c(NA,    NA)
cd	 <- c(Ddc_abe, NA)
dmat4 <- rbind(abe,cd)
colnames(dmat4) <- c("abe","cd")
dmat4
knitr::opts_chunk$set(echo = TRUE)
set.seed(10)
x <- set.seed(10)
x
x <- set.seed(10)
x
x <- set.seed(10)
x
x <- set.seed(10)
x
set.seed(10)
runif(n = 1)
set.seed(10)
rnorm(n = 1)
set.seed(11)
rnorm(n = 1)
set.seed(11)
rnorm(n = 1)
set.seed(11)
rnorm(n = 1)
set.seed(12)
rnorm(n = 1)
data <- c(0, 17, 21, 31, 23,
17, 0 , 30, 34, 21,
21, 30 ,0 ,28, 39,
31, 34, 28, 0, 43,
23, 21, 39, 43, 0)
upgma <- matrix(data,
nrow = 5,
ncol = 5,
dimnames = list(c("a","b","c","d","e"),
c("a","b","c","d","e")))
library(ape)
library(phangorn)
distance <- as.dist(upgma)
seq.upgma <- upgma(distance)
plot(seq.upgma, main = "upgma")
Sys.time()
set.seed(Sys.time())
Sys.time()
set.seed(Sys.time())
Sys.time()
set.seed(Sys.time())
Sys.time()
set.seed(Sys.time())
Sys.time()
set.seed(Sys.time())
Sys.time()
set.seed(Sys.time())
Sys.time()
set.seed(Sys.time())
Sys.time()
set.seed(Sys.time())
Sys.time()
set.seed(Sys.time())
Sys.time()
set.seed(Sys.time())
Sys.time()
set.seed(Sys.time())
Sys.time()
set.seed(Sys.time())
Dst_b <- (Ds_b + Dt_b)/2
# include all WPGMA distance calculations
Ds_p <- 19
Dt_p <- 17
Dst_p <- (Ds_p + Dt_p)/2
Ds_b <- 23
Dt_b <- 11
Dst_b <- (Ds_b + Dt_b)/2
# include all branch length calculations
# annotate your code (what matrix are you calcualting,
# what distance are you calculating, what length are you calculating)
knitr::opts_chunk$set(echo = TRUE, warnings = FALSE,message = F, fig.height = 3)
##Distance btwn ST and P
Ds_p <- 19
Dt_p <- 17
Dst_p <- (Ds_p + Dt_p)/2
#Distance btwn ST and B
Ds_b <- 23
Dt_b <- 11
Dst_b <- (Ds_b + Dt_b)/2
Dst_p
Dst_b
##Distance btwn ST and P
Ds_p <- 19
Dt_p <- 17
Dst_p <- (Ds_p + Dt_p)/2
#Distance btwn ST and B
Ds_b <- 14
Dt_b <- 11
Dst_b <- (Ds_b + Dt_b)/2
Dst_p
Dst_b
#DMAT3
Dts_p <- 18
Db_p <- 23
Dtsb_p <- (Dts_p + Db_p)/2
Dtsb_p
Dst_p <- 18
Db_p <- 23
Dstb_p <- (Dst_p + Db_p)/2
Dstb_p
x <- c(0,NA,NA,NA,
23,0,NA,NA,
17,11,0,NA,
19,14,8,NA)
x <- matrix(data = x)
distance <- as.dis(x)
library(phangorn)
library(ape)
x <- c(0,NA,NA,NA,
23,0,NA,NA,
17,11,0,NA,
19,14,8,NA)
x <- matrix(data = x)
distance <- as.dis(x)
x <- matrix(data = x)
distance <- as.dist(x)
seq.upgma <- upgma(distance)
x <- c(0,NA,NA,NA,
23,0,NA,NA,
17,11,0,NA,
19,14,8,0)
x <- matrix(data = x)
distance <- as.dist(x)
seq.upgma <- upgma(distance)
Dst_p
Dst_b
#DMAT2
#Distance btwn ST and P
Ds_p <- 19
Dt_p <- 17
Dst_p <- (Ds_p + Dt_p)/2
#Distance btwn ST and B
Ds_b <- 14
Dt_b <- 11
Dst_b <- (Ds_b + Dt_b)/2
Dst_p
Dst_b
#branch length calculations
Lst_p <- Dst_p/2
Lst_b <- Dst_b/2
Lp_b <- 23/2
# annotate your code (what matrix are you calcualting,
# what distance are you calculating, what length are you calculating)
#DMAT3
Dst_p <- 18
Db_p <- 23
Dstb_p <- (Dst_p + Db_p)/2
Dstb_p
#branch length calculations
Lstb_p <- Dstb_p/2
Lst_b <- Dst_b/2
q6wt <- 2
n=10
#rooted trees possible with n+10 taxa
answer <- factorial(2n-3)/(2^(n-2)*factorial(n-3))
q6wt <- 2
n <- 10
#rooted trees possible with n+10 taxa
answer <- factorial(2n-3)/(2^(n-2)*factorial(n-3))
q6wt <- 2
n <- 10
#rooted trees possible with n+10 taxa
answer <- factorial(2*n-3)/(2^(n-2)*factorial(n-2))
q6wt <- 2
n <- 10
#rooted trees possible with n+10 taxa
answer <- factorial(2*n-3)/(2^(n-2)*factorial(n-2))
nm <- c(191,245,314,403,518,665,854,1097)
ln.nm <- log(nm)
plot(nm~ln.nm)
plot(nm~ln.nm)
log(10)
log(1000)
q6wt <- 2
n <- 10
#rooted trees possible with n+10 taxa
answer <- factorial(2*n-3)/(2^(n-2)*factorial(n-2))
q17wt <- 1
p = 25/1000
p.jc =  -3/4 * log(1-4/3*p)
q17wt <- 1
p = 25/1000
p.jc =  -3/4 * log(1-4/3*p)
q18wt <- 5
dist_jc_1 <- function(p = 1){
p.jc =  -3/4 * log(1-4/3*p)
print(p.jc)
}
dist_jc_1(25/1000)
q17wt <- 1
p = 25/1000
p.jc =  -3/4 * log(1-4/3*p)
print(p.jc)
q18wt <- 5
dist_jc_1 <- function(p = 1){
p.jc =  -3/4 * log(1-4/3*p)
print(p.jc)
}
q19wt <- 3
dist_jc_2 <- function(n = 1, N = 1){
p.jc <-  -3/4 * log(1-4/3*(n/N))
n.jc <- p.jc*N
print(p.jc)
}
dist_jc_2(50,100)
q19wt <- 3
dist_jc_2 <- function(n = 1, N = 1){
p.jc <-  -3/4 * log(1-4/3*(n/N))
n.jc <- (p.jc*N)*100
print(p.jc)
}
library(evd)
library(extRemes)
# sample size = 100
## What does this line do:
#gives the densityfunction
x.100 <- rgumbel(n = 100, loc=26.45, scale=1/0.298)
y.100 <- c(100, mu.param.100, scale.param.100, lambda.parm.100)
#install.packages("evd")
#install.packages("extRemes")
library(evd)
library(extRemes)
# sample size = 100
## What does this line do:
#gives the densityfunction
x.100 <- rgumbel(n = 100, loc=26.45, scale=1/0.298)
## What does this line do:
#fits the data to an extreme value distribution
fit.100 <- fevd(x.100,
type = "Gumbel",
method = "MLE")
## What does this line do:
#Outputs a summary of all the statistics previously calulcated
s.100 <- summary(fit.100)
## What does this line do:
#
mu.param.100  <- s.100$par[1]
## What does this line do:
#
scale.param.100 <- s.100$par[2]
## What does this line do:
#
lambda.parm.100  <- 1/scale.param.100
## What does this line do:
#makes a vector of
y.100 <- c(100, mu.param.100, scale.param.100, lambda.parm.100)
is.y.100
is(y.100)
tigerData <- read.csv(url("http://whitlockschluter.zoology.ubc.ca/wp-content/data/chapter02/chap02e2aDeathsFromTigers.csv"))
head(tigerData)
tigerTable <- sort(table(tigerData$activity), decreasing = TRUE)
data.frame(Frequency = tigerTable)
data.frame(Frequency = addmargins(tigerTable))
barplot(tigerTable, ylab = "Frequency", cex.names = 0.5, las = 2)
#exporting pdf to the results folder
pdf("../results/tigerTableBarPlot.pdf")
barplot(tigerTable, ylab = "Frequency", cex.names = 0.5, las = 2)
dev.off()
lion <- read.csv(url("http://www.zoology.ubc.ca/~schluter/WhitlockSchluter/wp-content/data/chapter17/chap17e1LionNoses.csv"))
head(lion)
lionRegression <- lm(ageInYears ~ proportionBlack, data = lion)
out<- capture.output(summary(lionRegression))
cat("results", out, file= "../results/summary.txt",
sep = "\n", append = FALSE)
setwd("~/Documents/myproject/src")
tigerData <- read.csv(url("http://whitlockschluter.zoology.ubc.ca/wp-content/data/chapter02/chap02e2aDeathsFromTigers.csv"))
head(tigerData)
tigerTable <- sort(table(tigerData$activity), decreasing = TRUE)
data.frame(Frequency = tigerTable)
data.frame(Frequency = addmargins(tigerTable))
barplot(tigerTable, ylab = "Frequency", cex.names = 0.5, las = 2)
#exporting pdf to the results folder
pdf("../results/tigerTableBarPlot.pdf")
barplot(tigerTable, ylab = "Frequency", cex.names = 0.5, las = 2)
dev.off()
lion <- read.csv(url("http://www.zoology.ubc.ca/~schluter/WhitlockSchluter/wp-content/data/chapter17/chap17e1LionNoses.csv"))
head(lion)
lionRegression <- lm(ageInYears ~ proportionBlack, data = lion)
out<- capture.output(summary(lionRegression))
cat("results", out, file= "../results/summary.txt",
sep = "\n", append = FALSE)
birdData <- read.csv("../data/chap08q14BirdWindowCrash.csv")
head(birdData)
setwd("~/Desktop/Final_Assignment/code")
#code for conducting hypothesis test on data.
#Purpose: to find a relationship between the angle of windows and the amount of bird death
#read in files from raw data folder
birdData <- read.csv("../data/chap08q14BirdWindowCrash.csv")
head(birdData)
birdData
#code for conducting hypothesis test on data.
#Purpose: to find a relationship between the angle of windows and the amount of bird death
#read in files from raw data folder
birdData <- read.csv("../data/chap08q14BirdWindowCrash.csv")
barplot(birdData, ylab = "Frequency")
data.frame(Frequency = birdData)
is(birdData)
ggplot(birdData)
library(ggplot2)
ggplot(birdData)
histogram(birdData)
library(HistData)
histogram(birdData)
barplot(birdData)
barplot(birdData)
birdData2 <- read.csv("../data/BirdDeaths.csv")
barplot(birdData2)
birdData2 <- read.csv("../data/BirdDeaths.csv")
barplot(birdData2)
hist(birdData2, deaths~angle)
hist(birdData2, angle~deaths)
hist(birdData2, birdData2$Deaths ~ birdData2$Angle)
ggplot(birdData2, birdData2$Deaths ~ birdData2$Angle)
plot(birdData2)
barplot(birdData, ylab = "Frequency", cex.names = 0.5)
#read in files from raw data folder
birdData <- read.csv("../data/chap08q14BirdWindowCrash.csv")
barplot(birdData, ylab = "Frequency", cex.names = 0.5)
barplot(tigerTable, ylab = "Frequency", cex.names = 0.5, las = 2)
tigerData <- read.csv(url("http://whitlockschluter.zoology.ubc.ca/wp-content/data/chapter02/chap02e2aDeathsFromTigers.csv"))
head(tigerData)
tigerTable <- sort(table(tigerData$activity), decreasing = TRUE)
data.frame(Frequency = tigerTable)
data.frame(Frequency = addmargins(tigerTable))
barplot(tigerTable, ylab = "Frequency", cex.names = 0.5, las = 2)
#exporting pdf to the results folder
pdf("../results/tigerTableBarPlot.pdf")
barplot(tigerTable, ylab = "Frequency", cex.names = 0.5, las = 2)
dev.off()
lion <- read.csv(url("http://www.zoology.ubc.ca/~schluter/WhitlockSchluter/wp-content/data/chapter17/chap17e1LionNoses.csv"))
head(lion)
lionRegression <- lm(ageInYears ~ proportionBlack, data = lion)
out<- capture.output(summary(lionRegression))
cat("results", out, file= "../results/summary.txt",
sep = "\n", append = FALSE)
barplot(birdData, ylab = "Frequency", cex.names = 0.5, las = 2)
data.frame(Frequency = birdData)
barplot(birdData, ylab = "Frequency", cex.names = 0.5, las = 2)
#chi-squared test
birdTable <- sort(table(birdData$angleDuringBirdCrash), decreasing = TRUE)
data.frame(Frequency = birdTable)
barplot(birdData, ylab = "Frequency", cex.names = 0.5, las = 2)
#chi-squared test
birdTable <- sort(table(birdData$angleDuringBirdCrash), decreasing = TRUE)
data.frame(Frequency = birdTable)
barplot(birdData, ylab = "Frequency", cex.names = 0.5, las = 2)
#chi-squared test
read in files from raw data folder
birdData <- read.csv("../data/chap08q14BirdWindowCrash.csv")
birdData2 <- read.csv("../data/BirdDeaths.csv")
birdTable <- sort(table(birdData$angleDuringBirdCrash), decreasing = TRUE)
data.frame(Frequency = birdTable)
barplot(birdData, ylab = "Frequency", cex.names = 0.5, las = 2)
#chi-squared test
plot(birdData2)
#exporting pdf to the results folder
barplot(tigerTable, ylab = "Frequency", cex.names = 0.5, las = 2)
barplot(tigerTable, ylab = "Frequency", cex.names = 0.5, las = 2)
data.frame(Frequency = tigerTable)
birdTable <- sort(table(birdData$angleDuringBirdCrash), decreasing = TRUE)
data.frame(Frequency = birdTable)
barplot(birdData, ylab = "Frequency", cex.names = 0.5, las = 2)
barplot(birdData, ylab = "Frequency", cex.names = 0.5)
barplot(birdTable, ylab = "Frequency", cex.names = 0.5, las = 2)
birdTable <- sort(table(birdData$angleDuringBirdCrash), decreasing = TRUE)
data.frame(Frequency = birdTable)
birdData <- read.csv("../data/chap08q14BirdWindowCrash.csv")
birdData2 <- read.csv("../data/BirdDeaths.csv")
#places data into a table
birdTable <- sort(table(birdData$angleDuringBirdCrash), decreasing = TRUE)
#organizes table by frequency
data.frame(Frequency = birdTable)
#exporting pdf to the results folder
#pdf("../results/birdTableBarPlot.pdf")
barplot(birdTable, ylab = "Frequency", cex.names = 0.5, las = 2)
birdData <- read.csv("../data/chap08q14BirdWindowCrash.csv")
birdData2 <- read.csv("../data/BirdDeaths.csv")
#places data into a table
birdTable <- sort(table(birdData$angleDuringBirdCrash), decreasing = TRUE)
#organizes table by frequency
data.frame(Frequency = birdTable)
#exporting pdf to the results folder
#pdf("../results/birdTableBarPlot.pdf")
barplot(birdTable, ylab = "Frequency", cex.names = 0.5, las = 2)
birdData <- read.csv("../data/chap08q14BirdWindowCrash.csv")
birdData2 <- read.csv("../data/BirdDeaths.csv")
#places data into a table
birdTable <- sort(table(birdData$angleDuringBirdCrash), decreasing = TRUE)
#organizes table by frequency
data.frame(Frequency = birdTable)
#exporting pdf to the results folder
#pdf("../results/birdTableBarPlot.pdf")
barplot(birdTable, ylab = "Frequency", cex.names = 0.5, las = 2)
#chi-squared test
chisq.test(birdData, y = NULL)
#chi-squared test
chisq.test(birdTable, y = NULL)
is(birdStat)
is(birdStat)
birdStat
#chi-squared test
#save chi-squared test stats
birdStat <- chisq.test(birdTable, y = NULL)
birdStat
is
is(birdStat)
is(summaryStat)
summaryStat <- capture.output(summary(birdStat))
cat("results", out, file= "../results/summary.txt",
sep = "\n", append = FALSE)
is(summaryStat)
#code for conducting hypothesis test on data.
#Purpose: to find a relationship between the angle of windows and the amount of bird death
#remember to set your working directory to the "code" file
#(Session --> Set working directory --> source file directory )
#read in files from raw data folder
birdData <- read.csv("../data/chap08q14BirdWindowCrash.csv")
#places data into a table
birdTable <- sort(table(birdData$angleDuringBirdCrash), decreasing = TRUE)
#organizes table by frequency
data.frame(Frequency = birdTable)
#exporting pdf to the results folder
pdf("../results/birdTableBarPlot.pdf")
barplot(birdTable, ylab = "Frequency", cex.names = 0.5, las = 2)
dev.off()
#chi-squared test
#save chi-squared test stats
birdStat <- chisq.test(birdTable, y = NULL)
#outputs the stats into a txt file and saves in results folder
summaryStat <- capture.output(summary(birdStat))
cat("results", out, file= "../results/summary.txt",
sep = "\n", append = FALSE)
